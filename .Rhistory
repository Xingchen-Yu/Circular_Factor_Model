out[[1]] %>% filter(bioname == grep('Justin',bioname))
grep('Justin',out[[1]]$bioname)
out[[1]]$bioname
grep('Amash',out[[1]]$bioname)
out[[3]]
library(tidyverse)
congress_all = read_csv('./data/Hall_votes.csv',guess_max = 20000)
congress_member = read_csv('./data/HSall_members.csv',guess_max = 20000)
congress_bills = read_csv('./data/Hall_rollcalls.csv',guess_max = 20000,col_types = cols(session = col_character(),
clerk_rollnumber = col_character(),vote_result = col_character(),vote_question = col_character(),vote_desc = col_character()))
house_list = c(100:116)
dup_list = yes_no_list = missing_list = dup_missing_list = vector('list',17)
# c(NA,0)[is.na(c(NA,0)) == F]
aggregate_votes = function(x){
if(sum(is.na(x)) == 2){
x_mod = NA
}else{
x_mod = x[is.na(x) == F]
if(suppressWarnings(sum(is.na(as.numeric(x_mod)))!=2)){
x_mod = as.numeric(x_mod)
}
}
return(x_mod)
}
# aggregate_votes(c(dup_name_freq$bioname[1],dup_name_freq$bioname[1]))
# is.na(c(dup_name_freq$bioname[1],dup_name_freq$bioname[1])) == F
# !is.na(as.numeric(c(dup_name_freq$bioname[1],dup_name_freq$bioname[1])))
# sum(is.na(as.numeric(c(dup_name_freq$bioname[1],dup_name_freq$bioname[1]))))
# apply(as_tibble(list(x = c(1,NA),y=c(NA,NA),z =c(NA,0))),2,aggregate_votes)
for(i in 1:17){
cat("\rProgress: ",i,"/",17)
house_number = house_list[i]
##work here
# congress_member %>% filter(congress == house_number) %>% select(bioname) %>%
# mutate(bioname = str_c(str_sub(bioname,1,1),str_sub(tolower(str_extract(bioname,'[^,]+')),2),str_extract(bioname,', [a-zA-Z ]+')))
c1 = congress_member %>% filter(congress == house_number) %>% select(party_code,icpsr,bioname,state_abbrev,district_code) %>%
mutate(bioname = str_c(str_sub(bioname,1,1),str_sub(tolower(str_extract(bioname,'[^,]+')),2),str_extract(bioname,', [a-zA-Z ]+'))) %>%
mutate(party = case_when(party_code == 100~'D',party_code == 200~'R',party_code==328~'I')) %>%
mutate(name_district  = paste0(bioname," (",party,' ',state_abbrev,"-",district_code,")")) %>%
select(icpsr,name_district,bioname)
c2 = congress_all %>% select(icpsr,cast_code,congress,rollnumber) %>% filter(congress == house_number) %>%
mutate(cast_code = case_when(cast_code %in% c(1:3) ~ 1, cast_code %in% c(4:6) ~0,TRUE~NA_real_)) %>%
pivot_wider(names_from = rollnumber, values_from = cast_code) %>% select(-congress)
c_bills = congress_bills %>% filter(congress == house_number)
temp = c2 %>%select(-icpsr) %>%  summarise(across(everything(),function(x) sum(x,na.rm = T)))
t1 = sum(near(as.numeric(unlist(temp)),c_bills$yea_count)) == length(temp)
###H115 anomaly for yes_no_list, after checking, it's trump's votes! 99912 is trump
# as_tibble(as.numeric(unlist(temp)) - c_bills$yea_count) %>% mutate(rollnumber=c_bills$rollnumber) %>%
#   filter(value!=0) %>% print(n=Inf) %>% inner_join(  congress_all %>% select(icpsr,cast_code,congress,rollnumber)
#                                                      %>% filter(congress == house_number),by=c("rollnumber") ) %>%
#   select(-icpsr,-congress) %>% group_by(rollnumber) %>% count(cast_code) %>%
#   pivot_wider(names_from = cast_code,values_from = n) %>% print(n = Inf) %>% inner_join(c_bills %>%
#                                     select(rollnumber,yea_count),by=c("rollnumber")) %>% print(n=Inf) %>%
# inner_join(c2 %>% filter(icpsr==99912) %>% pivot_longer(cols=-icpsr) %>% rename(rollnumber = name) %>%
#              mutate(rollnumber = as.numeric(rollnumber) )%>% select(-icpsr),
#  by=c("rollnumber")) %>% mutate(corrected_yea = yea_count + value) %>%
#   mutate(check = `1`==corrected_yea)%>% print(n = Inf)
#
###
temp2 = c2 %>%select(-icpsr) %>%  summarise(across(everything(),function(x) length(which(x==0))))
t2 = sum(near(as.numeric(unlist(temp2)),c_bills$nay_count)) == length(temp)
yes_no_list[[i]] = c(t1,t2)
c3 = c2 %>% left_join(c1,by = "icpsr")
dup_list[[i]] = c3 %>% group_by(bioname) %>%  mutate(n = n()) %>% filter(n>1) %>%
select(bioname,name_district) %>% arrange(desc(name_district))
### combine rows
dup_name_freq = c3 %>% count(bioname) %>%  filter(n>1)  %>% select(-n)
c3_new = c3 %>% filter(!bioname %in% dup_name_freq$bioname) %>% relocate(bioname,name_district)
# dup_name_freq$bioname
# dup_name_freq %>% inner_join(c3, by = "bioname")
for(dup_name in dup_name_freq$bioname){
c3_new = bind_rows(c3_new,as_tibble(apply(dup_name_freq %>% inner_join(c3, by = "bioname") %>% filter(bioname == dup_name) %>%
# select(-bioname,-icpsr,-name_district) %>%
rowwise, 2, aggregate_votes))[1,])
}
n_bills = ncol(c3_new) - 3
missing_prop = apply(c3_new %>% select(-bioname,-name_district,-icpsr),1,function(x) sum(is.na(x)==T)/n_bills)
missing_40_percent = c3_new %>% select(bioname) %>% mutate(missing_prop = missing_prop) %>% filter(missing_prop>0.4)
missing_list[[i]] = missing_40_percent
dup_missing_list[[i]] = missing_40_percent %>% inner_join(dup_name_freq,by=c('bioname'))
# c3_new %>% filter(bioname %in% dup_name_freq$bioname)
###########
# c3 %>% group_by(bioname) %>%  mutate(n = n()) %>% filter(n>1) %>%
# select(bioname,name_district) %>% arrange(desc(name_district))
###########
dup_list[[i]]$name_district = gsub("\\)","",gsub(".*\\(","",dup_list[[i]]$name_district))
rm(c1)
rm(c2)
rm(c3)
rm(c_bills)
rm(t1)
rm(t2)
rm(temp2)
rm(temp)
}
names(dup_list) = names(yes_no_list) = names(missing_list) = names(dup_missing_list) = paste0('H',100:116)
dup_list_pivot = lapply(dup_list,function(x) x %>% group_by(bioname) %>% mutate(row = row_number()) %>%
pivot_wider(names_from = bioname,values_from=name_district) %>% select(-row))
dup_list_pivot
missing_list
library(tidyverse)
aggregate_votes = function(x){
if(sum(is.na(x)) == 2){
x_mod = NA
}else{
x_mod = x[is.na(x) == F]
if(suppressWarnings(sum(is.na(as.numeric(x_mod)))!=2)){
x_mod = as.numeric(x_mod)
}
}
return(x_mod)
}
house = T
h_s = ifelse(house==T,'H','S')
hn = 116
out = get_rollcall_data(house,h_s,hn,0.4)
get_rollcall_data = function(house,h_s,hn,threshold = 0.4){
## data path
PATH = paste0("./data/house/",h_s,hn,"/")
## loading meta data
congress_all = read_csv(paste0(PATH,h_s,hn,'_votes.csv'),guess_max = 20000,col_types = cols(prob = col_character()))
congress_member = read_csv(paste0(PATH,h_s,hn,'_members.csv'),guess_max = 20000)
congress_bills = read_csv(paste0(PATH,h_s,hn,'_rollcalls.csv'),guess_max = 20000,
col_types = cols(session = col_character(),clerk_rollnumber = col_character(),
vote_result = col_character(),vote_question = col_character(),vote_desc = col_character()))
## create new column name_district by combining name, party affiliation and district
icpsr_name_district = congress_member %>% select(party_code,icpsr,bioname,state_abbrev,district_code) %>%
## proper formatting of names
mutate(bioname = str_c(str_sub(bioname,1,1),str_sub(tolower(str_extract(bioname,'[^,]+')),2),str_extract(bioname,', [a-zA-Z ]+'))) %>%
## party code, Democrates: 100, Republican: 200, Independent: 328
mutate(party = case_when(party_code == 100~'D',party_code == 200~'R',party_code==328~'I',TRUE~'NA')) %>%
mutate(name_district  = paste0(bioname," (",party,' ',state_abbrev,"-",district_code,")")) %>%
select(icpsr,name_district,bioname)
## create data matrix, cast code of 1,2,3 stands for voting "Yea" while 4,5,6 stands for voting "Nah"
vote_data = congress_all %>% select(icpsr,cast_code,congress,rollnumber) %>%
mutate(cast_code = case_when(cast_code %in% c(1:3) ~ 1, cast_code %in% c(4:6) ~0,TRUE~NA_real_)) %>%
pivot_wider(names_from = rollnumber, values_from = cast_code) %>% select(-congress)
## joining icpsr with name_district
full_data = vote_data %>% left_join(icpsr_name_district ,by = "icpsr") %>%
relocate(bioname,name_district)
##clean memory
rm(list = c('icpsr_name_district','vote_data','congress_all','congress_member','congress_bills'))
## find people who switch party or change voting district (have multiple entries/icpsr)
dup_name_freq = full_data %>% count(bioname) %>%  filter(n>1)  %>% select(-n)
## find legislator who actually change party of voting district within a single congress period
impossible = full_data %>% count(bioname) %>%  filter(n>2)
if(nrow(impossible)>0){
print('this legislator is trolling')
print(impossible)
}
## combine these flip floppers' votes into a single row
if(length(dup_name_freq$bioname)>0){
full_data_init = full_data %>% filter(!bioname %in% dup_name_freq$bioname)
for(dup_name in dup_name_freq$bioname){
full_data_init  = bind_rows(full_data_init ,as_tibble(apply(dup_name_freq %>% inner_join(full_data, by = "bioname") %>%
filter(bioname == dup_name) %>% rowwise, 2, aggregate_votes))[1,])
}
}
## number of bills
n_bills = full_data_init %>% select(-bioname,-name_district,-icpsr) %>% ncol()
## check the rows match after combining flip floppers
check_unique = nrow(full_data_init) == nrow(full_data) - nrow(dup_name_freq)
if(check_unique==F){
print('check flip floppers')
}
## check whether all bills column are valid
check_bill = full_data_init %>% select(-bioname,-name_district,-icpsr) %>% colnames() %>% as.numeric() %>% is.na() %>% sum()
if(check_bill != 0){
print('Check the column names of the data')
}
## check proportion of bills missed in the congress
missing_prop = apply(full_data_init %>% select(-bioname,-name_district,-icpsr),1,function(x) sum(is.na(x)==T)/n_bills)
## legislator who missed more than 40% the votes are excluded from the data
missing_40_percent = full_data_init %>% select(bioname) %>% mutate(missing_prop = missing_prop) %>% filter(missing_prop>0.4)
## final data
full_data_filtered = full_data_init %>% filter(missing_prop <= 0.4)
return(list(full_data_filtered,dup_name_freq,missing_40_percent))
}
out = get_rollcall_data(house,h_s,hn,0.4)
grep('Amash',out[[1]]$bioname)
out[[2]]
out[[3]]
## missing more than 40% votes and flip flops
missing_40_percent %>% inner_join(dup_name_freq)
## data path
PATH = paste0("./data/house/",h_s,hn,"/")
## loading meta data
congress_all = read_csv(paste0(PATH,h_s,hn,'_votes.csv'),guess_max = 20000,col_types = cols(prob = col_character()))
congress_member = read_csv(paste0(PATH,h_s,hn,'_members.csv'),guess_max = 20000)
congress_bills = read_csv(paste0(PATH,h_s,hn,'_rollcalls.csv'),guess_max = 20000,
col_types = cols(session = col_character(),clerk_rollnumber = col_character(),
vote_result = col_character(),vote_question = col_character(),vote_desc = col_character()))
## create new column name_district by combining name, party affiliation and district
icpsr_name_district = congress_member %>% select(party_code,icpsr,bioname,state_abbrev,district_code) %>%
## proper formatting of names
mutate(bioname = str_c(str_sub(bioname,1,1),str_sub(tolower(str_extract(bioname,'[^,]+')),2),str_extract(bioname,', [a-zA-Z ]+'))) %>%
## party code, Democrates: 100, Republican: 200, Independent: 328
mutate(party = case_when(party_code == 100~'D',party_code == 200~'R',party_code==328~'I',TRUE~'NA')) %>%
mutate(name_district  = paste0(bioname," (",party,' ',state_abbrev,"-",district_code,")")) %>%
select(icpsr,name_district,bioname)
## create data matrix, cast code of 1,2,3 stands for voting "Yea" while 4,5,6 stands for voting "Nah"
vote_data = congress_all %>% select(icpsr,cast_code,congress,rollnumber) %>%
mutate(cast_code = case_when(cast_code %in% c(1:3) ~ 1, cast_code %in% c(4:6) ~0,TRUE~NA_real_)) %>%
pivot_wider(names_from = rollnumber, values_from = cast_code) %>% select(-congress)
## joining icpsr with name_district
full_data = vote_data %>% left_join(icpsr_name_district ,by = "icpsr") %>%
relocate(bioname,name_district)
##clean memory
rm(list = c('icpsr_name_district','vote_data','congress_all','congress_member','congress_bills'))
## find people who switch party or change voting district (have multiple entries/icpsr)
dup_name_freq = full_data %>% count(bioname) %>%  filter(n>1)  %>% select(-n)
## find legislator who actually change party of voting district within a single congress period
impossible = full_data %>% count(bioname) %>%  filter(n>2)
if(nrow(impossible)>0){
print('this legislator is trolling')
print(impossible)
}
## combine these flip floppers' votes into a single row
if(length(dup_name_freq$bioname)>0){
full_data_init = full_data %>% filter(!bioname %in% dup_name_freq$bioname)
for(dup_name in dup_name_freq$bioname){
full_data_init  = bind_rows(full_data_init ,as_tibble(apply(dup_name_freq %>% inner_join(full_data, by = "bioname") %>%
filter(bioname == dup_name) %>% rowwise, 2, aggregate_votes))[1,])
}
}
## number of bills
n_bills = full_data_init %>% select(-bioname,-name_district,-icpsr) %>% ncol()
## check the rows match after combining flip floppers
check_unique = nrow(full_data_init) == nrow(full_data) - nrow(dup_name_freq)
if(check_unique==F){
print('check flip floppers')
}
## check whether all bills column are valid
check_bill = full_data_init %>% select(-bioname,-name_district,-icpsr) %>% colnames() %>% as.numeric() %>% is.na() %>% sum()
if(check_bill != 0){
print('Check the column names of the data')
}
## check proportion of bills missed in the congress
missing_prop = apply(full_data_init %>% select(-bioname,-name_district,-icpsr),1,function(x) sum(is.na(x)==T)/n_bills)
## legislator who missed more than 40% the votes are excluded from the data
missing_40_percent = full_data_init %>% select(bioname) %>% mutate(missing_prop = missing_prop) %>% filter(missing_prop>0.4)
## missing more than 40% votes and flip flops!
troll = missing_40_percent %>% inner_join(dup_name_freq)
troll
## missing more than 40% votes and flip flops!
troll = missing_40_percent %>% inner_join(dup_name_freq,by='bioname')
dup_name_freq
nrow(missing_40_percent) + nrow(full_data_filtered) + nrow(dup_name_freq) - nrow(troll)
## final data
full_data_filtered = full_data_init %>% filter(missing_prop <= 0.4)
## final check preprocessing
nrow(full_data) == nrow(missing_40_percent) + nrow(full_data_filtered) + nrow(dup_name_freq) - nrow(troll)
## final check preprocessing
check_row = nrow(full_data) == nrow(missing_40_percent) + nrow(full_data_filtered) + nrow(dup_name_freq) - nrow(troll)
if(!check_row){
print('Check flip floppers')
}
check_unique
if(!check_unique){
print('check flip floppers')
}
library(tidyverse)
## function to aggregate legislators' (who switch parties or change district) votes into a single row
aggregate_votes = function(x){
if(sum(is.na(x)) == 2){
x_mod = NA
}else{
x_mod = x[is.na(x) == F]
if(suppressWarnings(sum(is.na(as.numeric(x_mod)))!=2)){
x_mod = as.numeric(x_mod)
}
}
return(x_mod)
}
get_rollcall_data = function(house,h_s,hn,threshold = 0.4){
## data path
PATH = paste0("./data/house/",h_s,hn,"/")
## loading meta data
congress_all = read_csv(paste0(PATH,h_s,hn,'_votes.csv'),guess_max = 20000,col_types = cols(prob = col_character()))
congress_member = read_csv(paste0(PATH,h_s,hn,'_members.csv'),guess_max = 20000)
congress_bills = read_csv(paste0(PATH,h_s,hn,'_rollcalls.csv'),guess_max = 20000,
col_types = cols(session = col_character(),clerk_rollnumber = col_character(),
vote_result = col_character(),vote_question = col_character(),vote_desc = col_character()))
## create new column name_district by combining name, party affiliation and district
icpsr_name_district = congress_member %>% select(party_code,icpsr,bioname,state_abbrev,district_code) %>%
## proper formatting of names
mutate(bioname = str_c(str_sub(bioname,1,1),str_sub(tolower(str_extract(bioname,'[^,]+')),2),str_extract(bioname,', [a-zA-Z ]+'))) %>%
## party code, Democrates: 100, Republican: 200, Independent: 328
mutate(party = case_when(party_code == 100~'D',party_code == 200~'R',party_code==328~'I',TRUE~'NA')) %>%
mutate(name_district  = paste0(bioname," (",party,' ',state_abbrev,"-",district_code,")")) %>%
select(icpsr,name_district,bioname)
## create data matrix, cast code of 1,2,3 stands for voting "Yea" while 4,5,6 stands for voting "Nah"
vote_data = congress_all %>% select(icpsr,cast_code,congress,rollnumber) %>%
mutate(cast_code = case_when(cast_code %in% c(1:3) ~ 1, cast_code %in% c(4:6) ~0,TRUE~NA_real_)) %>%
pivot_wider(names_from = rollnumber, values_from = cast_code) %>% select(-congress)
## joining icpsr with name_district
full_data = vote_data %>% left_join(icpsr_name_district ,by = "icpsr") %>%
relocate(bioname,name_district)
##clean memory
rm(list = c('icpsr_name_district','vote_data','congress_all','congress_member','congress_bills'))
## find people who switch party or change voting district (have multiple entries/icpsr)
dup_name_freq = full_data %>% count(bioname) %>%  filter(n>1)  %>% select(-n)
## find legislator who actually change party of voting district within a single congress period
impossible = full_data %>% count(bioname) %>%  filter(n>2)
if(nrow(impossible)>0){
print('this legislator is trolling')
print(impossible)
}
## combine these flip floppers' votes into a single row
if(length(dup_name_freq$bioname)>0){
full_data_init = full_data %>% filter(!bioname %in% dup_name_freq$bioname)
for(dup_name in dup_name_freq$bioname){
full_data_init  = bind_rows(full_data_init ,as_tibble(apply(dup_name_freq %>% inner_join(full_data, by = "bioname") %>%
filter(bioname == dup_name) %>% rowwise, 2, aggregate_votes))[1,])
}
}
## number of bills
n_bills = full_data_init %>% select(-bioname,-name_district,-icpsr) %>% ncol()
## check the rows match after combining flip floppers
check_unique = nrow(full_data_init) == nrow(full_data) - nrow(dup_name_freq)
if(!check_unique){
print('check flip floppers')
}
## check whether all bills column are valid
check_bill = full_data_init %>% select(-bioname,-name_district,-icpsr) %>% colnames() %>% as.numeric() %>% is.na() %>% sum()
if(check_bill != 0){
print('Check the column names of the data')
}
## check proportion of bills missed in the congress
missing_prop = apply(full_data_init %>% select(-bioname,-name_district,-icpsr),1,function(x) sum(is.na(x)==T)/n_bills)
## legislator who missed more than 40% the votes are excluded from the data
missing_40_percent = full_data_init %>% select(bioname) %>% mutate(missing_prop = missing_prop) %>% filter(missing_prop>0.4)
## missing more than 40% votes and flip flops!
troll = missing_40_percent %>% inner_join(dup_name_freq,by='bioname')
## final data
full_data_filtered = full_data_init %>% filter(missing_prop <= 0.4)
## final check preprocessing
check_row = nrow(full_data) == nrow(missing_40_percent) + nrow(full_data_filtered) + nrow(dup_name_freq) - nrow(troll)
if(!check_row){
print('Check flip floppers')
}
return(list(full_data_filtered,dup_name_freq,missing_40_percent))
}
out = get_rollcall_data(house,h_s,hn,0.4)
house = T
h_s = ifelse(house==T,'H','S')
hn = 116
house = T
h_s = ifelse(house==T,'H','S')
hn = 116
out = get_rollcall_data(house,h_s,hn,0.4)
grep('Amash',out[[1]]$bioname)
out[[2]]
out[[3]]
## data path
PATH = paste0("./data/house/",h_s,hn,"/")
## loading meta data
congress_all = read_csv(paste0(PATH,h_s,hn,'_votes.csv'),guess_max = 20000,col_types = cols(prob = col_character()))
congress_member = read_csv(paste0(PATH,h_s,hn,'_members.csv'),guess_max = 20000)
congress_bills = read_csv(paste0(PATH,h_s,hn,'_rollcalls.csv'),guess_max = 20000,
col_types = cols(session = col_character(),clerk_rollnumber = col_character(),
vote_result = col_character(),vote_question = col_character(),vote_desc = col_character()))
grep('TIFFANYcongress_member$bioname
'ASDF'
grep('TIFFANY',congress_member$bioname)
congress_member$bioname[grep('TIFFANY',congress_member$bioname)]
## create new column name_district by combining name, party affiliation and district
icpsr_name_district = congress_member %>% select(party_code,icpsr,bioname,state_abbrev,district_code) %>%
## proper formatting of names
mutate(bioname = str_c(str_sub(bioname,1,1),str_sub(tolower(str_extract(bioname,'[^,]+')),2),str_extract(bioname,', [.]+'))) %>%
## party code, Democrates: 100, Republican: 200, Independent: 328
mutate(party = case_when(party_code == 100~'D',party_code == 200~'R',party_code==328~'I',TRUE~'NA')) %>%
mutate(name_district  = paste0(bioname," (",party,' ',state_abbrev,"-",district_code,")")) %>%
select(icpsr,name_district,bioname)
icpsr_name_district
## create new column name_district by combining name, party affiliation and district
icpsr_name_district = congress_member %>% select(party_code,icpsr,bioname,state_abbrev,district_code) %>%
## proper formatting of names
mutate(bioname = str_c(str_sub(bioname,1,1),str_sub(tolower(str_extract(bioname,'[^,]+')),2),str_extract(bioname,', [a-zA-Z]+'))) %>%
## party code, Democrates: 100, Republican: 200, Independent: 328
mutate(party = case_when(party_code == 100~'D',party_code == 200~'R',party_code==328~'I',TRUE~'NA')) %>%
mutate(name_district  = paste0(bioname," (",party,' ',state_abbrev,"-",district_code,")")) %>%
select(icpsr,name_district,bioname)
icpsr_name_district
congress_member$bioname[grep('TIFFANY',congress_member$bioname)]
## create new column name_district by combining name, party affiliation and district
icpsr_name_district = congress_member %>% select(party_code,icpsr,bioname,state_abbrev,district_code) %>%
## proper formatting of names
mutate(bioname = str_c(str_sub(bioname,1,1),str_sub(tolower(str_extract(bioname,'[^,]+')),2),str_extract(bioname,', [a-zA-Z:graph:]+'))) %>%
## party code, Democrates: 100, Republican: 200, Independent: 328
mutate(party = case_when(party_code == 100~'D',party_code == 200~'R',party_code==328~'I',TRUE~'NA')) %>%
mutate(name_district  = paste0(bioname," (",party,' ',state_abbrev,"-",district_code,")")) %>%
select(icpsr,name_district,bioname)
icpsr_name_district
icpsr_name_district$bioname[grep('TIFFANY',icpsr_name_district$bioname)]
icpsr_name_district$bioname[grep('Tiffany',icpsr_name_district$bioname)]
## create new column name_district by combining name, party affiliation and district
icpsr_name_district = congress_member %>% select(party_code,icpsr,bioname,state_abbrev,district_code) %>%
## proper formatting of names
mutate(bioname = str_c(str_sub(bioname,1,1),str_sub(tolower(str_extract(bioname,'[^,]+')),2),str_extract(bioname,', [a-zA-Z]+'))) %>%
## party code, Democrates: 100, Republican: 200, Independent: 328
mutate(party = case_when(party_code == 100~'D',party_code == 200~'R',party_code==328~'I',TRUE~'NA')) %>%
mutate(name_district  = paste0(bioname," (",party,' ',state_abbrev,"-",district_code,")")) %>%
select(icpsr,name_district,bioname)
icpsr_name_district$bioname[grep('Tiffany',icpsr_name_district$bioname)]
## create new column name_district by combining name, party affiliation and district
icpsr_name_district = congress_member %>% select(party_code,icpsr,bioname,state_abbrev,district_code) %>%
## proper formatting of names
mutate(bioname = str_c(str_sub(bioname,1,1),str_sub(tolower(str_extract(bioname,'[^,]+')),2),str_extract(bioname,', [a-zA-Z\n]+'))) %>%
## party code, Democrates: 100, Republican: 200, Independent: 328
mutate(party = case_when(party_code == 100~'D',party_code == 200~'R',party_code==328~'I',TRUE~'NA')) %>%
mutate(name_district  = paste0(bioname," (",party,' ',state_abbrev,"-",district_code,")")) %>%
select(icpsr,name_district,bioname)
icpsr_name_district$bioname[grep('Tiffany',icpsr_name_district$bioname)]
## create new column name_district by combining name, party affiliation and district
icpsr_name_district = congress_member %>% select(party_code,icpsr,bioname,state_abbrev,district_code) %>%
## proper formatting of names
mutate(bioname = str_c(str_sub(bioname,1,1),str_sub(tolower(str_extract(bioname,'[^,]+')),2),str_extract(bioname,', [#]+'))) %>%
## party code, Democrates: 100, Republican: 200, Independent: 328
mutate(party = case_when(party_code == 100~'D',party_code == 200~'R',party_code==328~'I',TRUE~'NA')) %>%
mutate(name_district  = paste0(bioname," (",party,' ',state_abbrev,"-",district_code,")")) %>%
select(icpsr,name_district,bioname)
icpsr_name_district$bioname[grep('Tiffany',icpsr_name_district$bioname)]
icpsr_name_district
congress_member$bioname
## create new column name_district by combining name, party affiliation and district
icpsr_name_district = congress_member %>% select(party_code,icpsr,bioname,state_abbrev,district_code) %>%
## proper formatting of names
mutate(bioname = str_c(str_sub(bioname,1,1),str_sub(tolower(str_extract(bioname,'[^,]+')),2),str_extract(bioname,', [^]+'))) %>%
## party code, Democrates: 100, Republican: 200, Independent: 328
mutate(party = case_when(party_code == 100~'D',party_code == 200~'R',party_code==328~'I',TRUE~'NA')) %>%
mutate(name_district  = paste0(bioname," (",party,' ',state_abbrev,"-",district_code,")")) %>%
select(icpsr,name_district,bioname)
## create new column name_district by combining name, party affiliation and district
icpsr_name_district = congress_member %>% select(party_code,icpsr,bioname,state_abbrev,district_code) %>%
## proper formatting of names
mutate(bioname = str_c(str_sub(bioname,1,1),str_sub(tolower(str_extract(bioname,'[^,]+')),2),str_extract(bioname,', [^,]+'))) %>%
## party code, Democrates: 100, Republican: 200, Independent: 328
mutate(party = case_when(party_code == 100~'D',party_code == 200~'R',party_code==328~'I',TRUE~'NA')) %>%
mutate(name_district  = paste0(bioname," (",party,' ',state_abbrev,"-",district_code,")")) %>%
select(icpsr,name_district,bioname)
icpsr_name_district
icpsr_name_district$bioname
get_rollcall_data = function(house,h_s,hn,threshold = 0.4){
## data path
PATH = paste0("./data/house/",h_s,hn,"/")
## loading meta data
congress_all = read_csv(paste0(PATH,h_s,hn,'_votes.csv'),guess_max = 20000,col_types = cols(prob = col_character()))
congress_member = read_csv(paste0(PATH,h_s,hn,'_members.csv'),guess_max = 20000)
congress_bills = read_csv(paste0(PATH,h_s,hn,'_rollcalls.csv'),guess_max = 20000,
col_types = cols(session = col_character(),clerk_rollnumber = col_character(),
vote_result = col_character(),vote_question = col_character(),vote_desc = col_character()))
## create new column name_district by combining name, party affiliation and district
icpsr_name_district = congress_member %>% select(party_code,icpsr,bioname,state_abbrev,district_code) %>%
## proper formatting of names
mutate(bioname = str_c(str_sub(bioname,1,1),str_sub(tolower(str_extract(bioname,'[^,]+')),2),str_extract(bioname,', [^,]+'))) %>%
## party code, Democrates: 100, Republican: 200, Independent: 328
mutate(party = case_when(party_code == 100~'D',party_code == 200~'R',party_code==328~'I',TRUE~'NA')) %>%
mutate(name_district  = paste0(bioname," (",party,' ',state_abbrev,"-",district_code,")")) %>%
select(icpsr,name_district,bioname)
## create data matrix, cast code of 1,2,3 stands for voting "Yea" while 4,5,6 stands for voting "Nah"
vote_data = congress_all %>% select(icpsr,cast_code,congress,rollnumber) %>%
mutate(cast_code = case_when(cast_code %in% c(1:3) ~ 1, cast_code %in% c(4:6) ~0,TRUE~NA_real_)) %>%
pivot_wider(names_from = rollnumber, values_from = cast_code) %>% select(-congress)
## joining icpsr with name_district
full_data = vote_data %>% left_join(icpsr_name_district ,by = "icpsr") %>%
relocate(bioname,name_district)
##clean memory
rm(list = c('icpsr_name_district','vote_data','congress_all','congress_member','congress_bills'))
## find people who switch party or change voting district (have multiple entries/icpsr)
dup_name_freq = full_data %>% count(bioname) %>%  filter(n>1)  %>% select(-n)
## find legislator who actually change party of voting district within a single congress period
impossible = full_data %>% count(bioname) %>%  filter(n>2)
if(nrow(impossible)>0){
print('this legislator is trolling')
print(impossible)
}
## combine these flip floppers' votes into a single row
if(length(dup_name_freq$bioname)>0){
full_data_init = full_data %>% filter(!bioname %in% dup_name_freq$bioname)
for(dup_name in dup_name_freq$bioname){
full_data_init  = bind_rows(full_data_init ,as_tibble(apply(dup_name_freq %>% inner_join(full_data, by = "bioname") %>%
filter(bioname == dup_name) %>% rowwise, 2, aggregate_votes))[1,])
}
}
## number of bills
n_bills = full_data_init %>% select(-bioname,-name_district,-icpsr) %>% ncol()
## check the rows match after combining flip floppers
check_unique = nrow(full_data_init) == nrow(full_data) - nrow(dup_name_freq)
if(!check_unique){
print('check flip floppers')
}
## check whether all bills column are valid
check_bill = full_data_init %>% select(-bioname,-name_district,-icpsr) %>% colnames() %>% as.numeric() %>% is.na() %>% sum()
if(check_bill != 0){
print('Check the column names of the data')
}
## check proportion of bills missed in the congress
missing_prop = apply(full_data_init %>% select(-bioname,-name_district,-icpsr),1,function(x) sum(is.na(x)==T)/n_bills)
## legislator who missed more than 40% the votes are excluded from the data
missing_40_percent = full_data_init %>% select(bioname) %>% mutate(missing_prop = missing_prop) %>% filter(missing_prop>0.4)
## missing more than 40% votes and flip flops!
troll = missing_40_percent %>% inner_join(dup_name_freq,by='bioname')
## final data
full_data_filtered = full_data_init %>% filter(missing_prop <= 0.4)
## final check preprocessing
check_row = nrow(full_data) == nrow(missing_40_percent) + nrow(full_data_filtered) + nrow(dup_name_freq) - nrow(troll)
if(!check_row){
print('Check flip floppers')
}
return(list(full_data_filtered,dup_name_freq,missing_40_percent))
}
