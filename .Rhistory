sapply(omega_vec[-1],function(x) as.numeric(rvonmises(nr,pi,x)/2)))
sapply(omega_vec[-1],function(x) as.numeric(rvonmises(nr,pi,x)/2))
# omega_vec = c(2,2,2)
omega_vec = c(1,4,9)
beta_true = getcord_auto(cbind( as.numeric(rvonmises(nr,pi,omega_vec[1])),
sapply(omega_vec[-1],function(x) as.numeric(rvonmises(nr,pi,x)/2))),dim_K)
pns_result_great = pns(apply(beta_true,1,function(x) x/norm(x,'2')),sphere.type = 'great')
cumsum(pns_result_great$percent/100)
omega_vec = c(2,2,2)
beta_true = getcord_auto(cbind( as.numeric(rvonmises(nr,pi,omega_vec[1])),
sapply(omega_vec[-1],function(x) as.numeric(rvonmises(nr,pi,x)/2))),dim_K)
pns_result_great = pns(apply(beta_true,1,function(x) x/norm(x,'2')),sphere.type = 'great')
cumsum(pns_result_great$percent/100)
omega_vec = c(10,12,14)
beta_true = getcord_auto(cbind( as.numeric(rvonmises(nr,pi,omega_vec[1])),
sapply(omega_vec[-1],function(x) as.numeric(rvonmises(nr,pi,x)/2))),dim_K)
pns_result_great = pns(apply(beta_true,1,function(x) x/norm(x,'2')),sphere.type = 'great')
cumsum(pns_result_great$percent/100)
omega_vec = c(10,10,10)
beta_true = getcord_auto(cbind( as.numeric(rvonmises(nr,pi,omega_vec[1])),
sapply(omega_vec[-1],function(x) as.numeric(rvonmises(nr,pi,x)/2))),dim_K)
pns_result_great = pns(apply(beta_true,1,function(x) x/norm(x,'2')),sphere.type = 'great')
cumsum(pns_result_great$percent/100)
omega_vec = c(2,2,2)
beta_true = getcord_auto(cbind( as.numeric(rvonmises(nr,pi,omega_vec[1])),
sapply(omega_vec[-1],function(x) as.numeric(rvonmises(nr,pi,x)/2))),dim_K)
pns_result_great = pns(apply(beta_true,1,function(x) x/norm(x,'2')),sphere.type = 'great')
cumsum(pns_result_great$percent/100)
omega_vec = c(0.5,2,2)
# omega_vec = c(10,10,10)
beta_true = getcord_auto(cbind( as.numeric(rvonmises(nr,pi,omega_vec[1])),
sapply(omega_vec[-1],function(x) as.numeric(rvonmises(nr,pi,x)/2))),dim_K)
pns_result_great = pns(apply(beta_true,1,function(x) x/norm(x,'2')),sphere.type = 'great')
cumsum(pns_result_great$percent/100)
# omega_vec = c(0.5,2,2)
omega_vec = c(0,10,10)
beta_true = getcord_auto(cbind( as.numeric(rvonmises(nr,pi,omega_vec[1])),
sapply(omega_vec[-1],function(x) as.numeric(rvonmises(nr,pi,x)/2))),dim_K)
pns_result_great = pns(apply(beta_true,1,function(x) x/norm(x,'2')),sphere.type = 'great')
cumsum(pns_result_great$percent/100)
# omega_vec = c(0.5,2,2)
omega_vec = c(10,10,10)
beta_true = getcord_auto(cbind( as.numeric(rvonmises(nr,pi,omega_vec[1])),
sapply(omega_vec[-1],function(x) as.numeric(rvonmises(nr,pi,x)/2))),dim_K)
pns_result_great = pns(apply(beta_true,1,function(x) x/norm(x,'2')),sphere.type = 'great')
cumsum(pns_result_great$percent/100)
omega_vec = c(2,2,2)
beta_true = getcord_auto(cbind( as.numeric(rvonmises(nr,pi,omega_vec[1])),
sapply(omega_vec[-1],function(x) as.numeric(rvonmises(nr,pi,x)/2))),dim_K)
pns_result_great = pns(apply(beta_true,1,function(x) x/norm(x,'2')),sphere.type = 'great')
cumsum(pns_result_great$percent/100)
omega_vec = c(4,4,4)
beta_true = getcord_auto(cbind( as.numeric(rvonmises(nr,pi,omega_vec[1])),
sapply(omega_vec[-1],function(x) as.numeric(rvonmises(nr,pi,x)/2))),dim_K)
pns_result_great = pns(apply(beta_true,1,function(x) x/norm(x,'2')),sphere.type = 'great')
cumsum(pns_result_great$percent/100)
omega_vec = c(2,2,2)
beta_true = getcord_auto(cbind( as.numeric(rvonmises(nr,pi,omega_vec[1])),
sapply(omega_vec[-1],function(x) as.numeric(rvonmises(nr,pi,x)/2))),dim_K)
pns_result_great = pns(apply(beta_true,1,function(x) x/norm(x,'2')),sphere.type = 'great')
cumsum(pns_result_great$percent/100)
omega_vec = c(1,4,9)
beta_true = getcord_auto(cbind( as.numeric(rvonmises(nr,pi,omega_vec[1])),
sapply(omega_vec[-1],function(x) as.numeric(rvonmises(nr,pi,x)/2))),dim_K)
pns_result_great = pns(apply(beta_true,1,function(x) x/norm(x,'2')),sphere.type = 'great')
cumsum(pns_result_great$percent/100)
omega_vec = c(4,4,4)
beta_true = getcord_auto(cbind( as.numeric(rvonmises(nr,pi,omega_vec[1])),
sapply(omega_vec[-1],function(x) as.numeric(rvonmises(nr,pi,x)/2))),dim_K)
pns_result_great = pns(apply(beta_true,1,function(x) x/norm(x,'2')),sphere.type = 'great')
cumsum(pns_result_great$percent/100)
load("F:/Study_Backedup/UCSC/LatentFactorModel/paper3_sim/data_1_new_2/nd/1_10_tied_sym/Data_1_Tied_TRUE_Scale_FALSE_4_nd.Rdata")
quantile(likeli_chain)
var(likeli_chain)
load("F:/Study_Backedup/UCSC/LatentFactorModel/paper3_sim/data_1_new_2/nd/1_10_tied_sym/Data_1_Tied_TRUE_Scale_FALSE_2_nd.Rdata")
quantile(likeli_chain)
var(likeli_chain)
library(KMsurv)
install.packages('KMsurv')
library(survival)
library(KMsurv)
data(bmt)
str(bmt)
Surv
1-1/38
(1-1/38)*(1-1/37)
(1-1/38)*(1-1/37)*35/36
bmt$t2
bmt$d3
load("F:/Study_Backedup/UCSC/LatentFactorModel/beps2_fulldata/nd/1_10_untied_asym/Data_3_Tied_FALSE_Scale_TRUE_5_nd.Rdata")
b_range
y_range
1-0.8^14
master = expand.grid(kappa_tied=c(T,F),s_vec=c(T,F))
master
load("F:/Study_Backedup/UCSC/LatentFactorModel/ASES/nd/Data_6_Tied_TRUE_Scale_TRUE_nd.Rdata")
seed
b_range
n_range
p
load("F:/Study_Backedup/UCSC/LatentFactorModel/ASES/nd/1_10_tied_asym/Data_6_Tied_TRUE_Scale_TRUE_6_nd.Rdata")
b_range
n_range
print(paste('beta ar is',beta_ratio))
print(paste('yes ar is',yes_ratio))
print(paste('no ar is',no_ratio))
print(paste('kappa ar is',kappa_ratio))
print(paste('omega ar is',omega_count_all/i))
load("F:/Study_Backedup/UCSC/LatentFactorModel/paper3_sim/data_1_2/nd/largest_dim_all/Data_1_Tied_FALSE_Scale_TRUE_7_nd.Rdata")
seed
cluster_seed
b_range
y_range
yn_range
n_range
print(paste('beta ar is',beta_ratio))
print(paste('yes ar is',yes_ratio))
print(paste('no ar is',no_ratio))
print(paste('kappa ar is',kappa_ratio))
print(paste('omega ar is',omega_count_all/i))
if(s_vec==T){
print(paste('s ar is',s_ratio))
}
if(separate==T){
print(paste('omega_tau ar is',omega_tau_count_all/i))
}
print(paste('min kappa ar is',min(kappa_accept_rs_all/i)))
print(paste('min beta ar is',min(beta_accept_rs_all/i)))
print(paste('min yes ar is',min(yes_accept_rs_all/i)))
print(paste('min no ar is',min(no_accept_rs_all/i)))
if(s_vec==T){
print(paste('min s ar is',min(s_accept_rs_all/i)))
}
l_st
l_yn_range
data_number = 6
sim_number = 2
if(data_number==1){
if(sim_number==2){
folder_name = "paper3_sim/data_1_2"
}else if(sim_number==1){
folder_name = "paper3_sim/data_1_new_2"
}else if(sim_number==3){
folder_name = "paper3_sim/data_1_3"
}else{
print('wrong!')
}
}else{
folder_name = ifelse(data_number==3,"beps2_fulldata","ASES")
}
dic_master = vector('list',6)
load(file=paste0("F:/Study_Backedup/UCSC/LatentFactorModel/",folder_name,"/nd/1_10_tied_sym/DIC_sph.Rdata"),verbose = T)
dic_master[[1]] = dic[1:5]
rm(dic)
load(file=paste0("F:/Study_Backedup/UCSC/LatentFactorModel/",folder_name,"/nd/1_10_tied_asym/DIC_sph.Rdata"),verbose = T)
dic_master[[2]] = dic[1:5]
rm(dic)
load(file=paste0("F:/Study_Backedup/UCSC/LatentFactorModel/",folder_name,"/nd/1_10_untied_sym/DIC_sph.Rdata"),verbose = T)
dic_master[[3]] = dic[1:5]
rm(dic)
load(file=paste0("F:/Study_Backedup/UCSC/LatentFactorModel/",folder_name,"/nd/1_10_untied_asym/DIC_sph.Rdata"),verbose = T)
dic_master[[4]] = dic[1:5]
rm(dic)
load(file=paste0("F:/Study_Backedup/UCSC/LatentFactorModel/",folder_name,"/nd/1_10_po/DIC_eu.Rdata"),verbose = T)
dic_master[[5]] = dic[1:5]
rm(dic)
load(file=paste0("F:/Study_Backedup/UCSC/LatentFactorModel/",folder_name,"/nd/1_10_npo/DIC_eu.Rdata"),verbose = T)
dic_master[[6]] = dic[1:5]
rm(dic)
x11(width=10, height=10)
par(mar=c(10,10,4,4),mgp=c(6,2,0))
col_pad = c('red','blue','purple','green','orange','gray')
lty_master = c(1,2,4,5,6,7)
plot_range = range(unlist(dic_master))
for(i in 1:6){
if(i==1){
plot(dic_master[[1]],type='l', xlab='Dim', ylab='DIC',ylim=plot_range,lty=1,cex=2,cex.lab=2,cex.axis=2,lwd=3,col = col_pad[i])
}
lines(dic_master[[i]],col=col_pad[i],lwd=3,lty = lty_master[i])
}
legend(1,-18000, c('Symmetric, Tied', 'Asymmetric, Tied', 'Symmetric, not Tied','Asymmetric, not Tied','PO','NPO'),lty=lty_master, bty="n", col=col_pad,cex=2.3,lwd=3)
legend(1,-16000, c('Symmetric, Tied', 'Asymmetric, Tied', 'Symmetric, not Tied','Asymmetric, not Tied','PO','NPO'),lty=lty_master, bty="n", col=col_pad,cex=2.3,lwd=3)
par(mar=c(10,10,4,4),mgp=c(6,2,0))
col_pad = c('red','blue','purple','green','orange','gray')
lty_master = c(1,2,4,5,6,7)
plot_range = range(unlist(dic_master))
for(i in 1:6){
if(i==1){
plot(dic_master[[1]],type='l', xlab='Dim', ylab='DIC',ylim=plot_range,lty=1,cex=2,cex.lab=2,cex.axis=2,lwd=3,col = col_pad[i])
}
lines(dic_master[[i]],col=col_pad[i],lwd=3,lty = lty_master[i])
}
legend(1,-17000, c('Symmetric, Tied', 'Asymmetric, Tied', 'Symmetric, not Tied','Asymmetric, not Tied','PO','NPO'),lty=lty_master, bty="n", col=col_pad,cex=2.3,lwd=3)
par(mar=c(10,10,4,4),mgp=c(6,2,0))
col_pad = c('red','blue','purple','green','orange','gray')
lty_master = c(1,2,4,5,6,7)
plot_range = range(unlist(dic_master))
for(i in 1:6){
if(i==1){
plot(dic_master[[1]],type='l', xlab='Dim', ylab='DIC',ylim=plot_range,lty=1,cex=2,cex.lab=2,cex.axis=2,lwd=3,col = col_pad[i])
}
lines(dic_master[[i]],col=col_pad[i],lwd=3,lty = lty_master[i])
}
legend(1,-16000, c('Symmetric, Tied', 'Asymmetric, Tied', 'Symmetric, not Tied','Asymmetric, not Tied','PO','NPO'),lty=lty_master, bty="n", col=col_pad,cex=2.3,lwd=3)
x = matrix(rnorm(2000),10,20)
apply(x,2,function(x) sum(x))
apply(x,2,function(x) x/sum(x))
load("F:/Study_Backedup/UCSC/LatentFactorModel/beps2_fulldata/nd/1_10_tied_sym/Data_3_Tied_TRUE_Scale_FALSE_2_nd.Rdata")
x11(width = 10,height=10)
####################################################################################################
source('F:/Study_Backedup/UCSC/depository/Spherical_factor_model_cateogorical/source/Geodesic_paper3_nd_helper.R')
beta_angle = x_to_theta(dim_K,nr,beta_rs/n_pos)-pi
beta_angle = x_to_theta(2,nr,beta_rs/n_pos)-pi
beta_angle =  atan2_new(beta_rs/n_pos)
atan2_new = function(xmat){
atan2(xmat[,1],xmat[,2])
}
beta_angle =  atan2_new(beta_rs/n_pos)
x11(width = 10,height=10)
par(mar=c(7,7,2,2))
bryant = as.circular(beta_angle,units="radians",modulo="2pi",rotation="clock")
plot.circular(bryant,shrink=0.9,axes=F,units="radians",zero=pi/2,col='blue',cex=1.5)
unit = as.circular(c(-pi/2,0,pi/2),rotation='clock',zero=pi/2,cex.lab=2,cex.axis=2)
axis.circular(at=unit,labels=c(expression(-frac(pi,2)),"0",expression(frac(pi,2))),cex=3)
x11(width = 10,height=10)
par(mar=c(7,7,2,2))
bryant = as.circular(beta_angle,units="radians",modulo="2pi",rotation="clock")
####################################################################################################
library(circular)
par(mar=c(7,7,2,2))
bryant = as.circular(beta_angle,units="radians",modulo="2pi",rotation="clock")
plot.circular(bryant,shrink=0.9,axes=F,units="radians",zero=pi/2,col='blue',cex=1.5)
unit = as.circular(c(-pi/2,0,pi/2),rotation='clock',zero=pi/2,cex.lab=2,cex.axis=2)
axis.circular(at=unit,labels=c(expression(-frac(pi,2)),"0",expression(frac(pi,2))),cex=3)
####################################################################################################
library(circular)
source('F:/Study_Backedup/UCSC/depository/Spherical_factor_model_cateogorical/source/Geodesic_paper3_nd_helper.R')
atan2_new = function(xmat){
atan2(xmat[,1],xmat[,2])
}
# pdf(file = paste0("F:/Study_Backedup/UCSC/LatentFactorModel/paper3_sim/learned_angle_simu_",sim_number,"_first_dim.pdf"),width=10, height=10)
# load("F:/Study_Backedup/UCSC/LatentFactorModel/beps2_fulldata/nd/1_10_tied_sym/Data_3_Tied_TRUE_Scale_FALSE_2_nd.Rdata")
load("F:/Study_Backedup/UCSC/LatentFactorModel/beps2_fulldata/nd/1_10_tied_sym/Data_3_Tied_TRUE_Scale_FALSE_2_nd.Rdata")
####################################################################################################
library(circular)
source('F:/Study_Backedup/UCSC/depository/Spherical_factor_model_cateogorical/source/Geodesic_paper3_nd_helper.R')
atan2_new = function(xmat){
atan2(xmat[,1],xmat[,2])
}
load("F:/Study_Backedup/UCSC/LatentFactorModel/beps2_fulldata/nd/1_10_untied_asym/Data_3_Tied_FALSE_Scale_TRUE_2_nd.Rdata")
beta_angle =  atan2_new(beta_rs/n_pos)
x11(width = 10,height=10)
par(mar=c(7,7,2,2))
bryant = as.circular(beta_angle,units="radians",modulo="2pi",rotation="clock")
plot.circular(bryant,shrink=0.9,axes=F,units="radians",zero=pi/2,col='blue',cex=1.5)
unit = as.circular(c(-pi/2,0,pi/2),rotation='clock',zero=pi/2,cex.lab=2,cex.axis=2)
axis.circular(at=unit,labels=c(expression(-frac(pi,2)),"0",expression(frac(pi,2))),cex=3)
# load("F:/Study_Backedup/UCSC/LatentFactorModel/paper3_sim/data_1_new_2/nd/1_10_tied_sym/Data_1_Tied_TRUE_Scale_FALSE_4_nd.Rdata")
load("F:/Study_Backedup/UCSC/LatentFactorModel/paper3_sim/data_1_2/nd/1_10_untied_asym/Data_1_Tied_FALSE_Scale_TRUE_3_nd.Rdata")
beta_mean = x_to_theta(ncol(beta_true)-1,1000,beta_rs/n_pos)
yes_mean = yes_rs/n_pos
yes_angle = x_to_theta(ncol(yes_mean)-1,nrow(yes_mean),yes_mean)
no_mean = no_rs/n_pos
no_angle = x_to_theta(ncol(no_mean)-1,nrow(no_mean),no_mean)
# beta_mean[,1] = pi - beta_mean[,1]
beta_mean[,2] = pi/2 - beta_mean[,2]
x11(width=10,height=20)
par(mfrow=c(2,1))
par(mar=c(10,10,4,4),mgp=c(6,2,0))
plot(beta_true_angle[,1],beta_mean[,1],xlab='True',ylab='Learned',cex=1,cex.lab=2,cex.axis=2,pch=16)
# lines(1:1000,1:1000,col='red',lwd=2)
plot(beta_true_angle[,2],beta_mean[,2],xlab='True',ylab='Learned',cex=1,cex.lab=2,cex.axis=2,pch=16)
##########################
# load("F:/Study_Backedup/UCSC/depository/Spherical_factor_model_cateogorical/data/simu_1_new_2.Rdata")
load("F:/Study_Backedup/UCSC/depository/Spherical_factor_model_cateogorical/data/simu_2.Rdata")
beta_true = ymat_out[[2]]
source("F:/Study_Backedup/UCSC/depository/Spherical_factor_model_cateogorical/source/Geodesic_paper3_nd_helper.R")
beta_true_angle = x_to_theta(ncol(beta_true)-1,1000,beta_true)
par(mfrow=c(2,1))
par(mar=c(10,10,4,4),mgp=c(6,2,0))
plot(beta_true_angle[,1],beta_mean[,1],xlab='True',ylab='Learned',cex=1,cex.lab=2,cex.axis=2,pch=16)
# lines(1:1000,1:1000,col='red',lwd=2)
plot(beta_true_angle[,2],beta_mean[,2],xlab='True',ylab='Learned',cex=1,cex.lab=2,cex.axis=2,pch=16)
l_20 = which(diff%in% tail(diff[order(diff)],30))
diff = abs(rank(beta_true_angle[,1])-rank(beta_mean[,1]))
l_20 = which(diff%in% tail(diff[order(diff)],30))
l_20
##########################
# load("F:/Study_Backedup/UCSC/depository/Spherical_factor_model_cateogorical/data/simu_1_new_2.Rdata")
load("F:/Study_Backedup/UCSC/depository/Spherical_factor_model_cateogorical/data/simu_2.Rdata")
beta_true = ymat_out[[2]]
source("F:/Study_Backedup/UCSC/depository/Spherical_factor_model_cateogorical/source/Geodesic_paper3_nd_helper.R")
beta_true_angle = x_to_theta(ncol(beta_true)-1,1000,beta_true)
load("F:/Study_Backedup/UCSC/depository/Spherical_factor_model_cateogorical/Data_1_Tied_FALSE_Scale_TRUE_3_nd.Rdata")
beta_mean = x_to_theta(ncol(beta_true)-1,1000,beta_rs/n_pos)
yes_mean = yes_rs/n_pos
yes_angle = x_to_theta(ncol(yes_mean)-1,nrow(yes_mean),yes_mean)
no_mean = no_rs/n_pos
no_angle = x_to_theta(ncol(no_mean)-1,nrow(no_mean),no_mean)
beta_mean[,1] = pi - beta_mean[,1]
# beta_mean[,1] = pi - beta_mean[,1]
beta_mean[,2] = pi/2 - beta_mean[,2]
x11(width=10,height=20)
par(mfrow=c(2,1))
par(mar=c(10,10,4,4),mgp=c(6,2,0))
plot(beta_true_angle[,1],beta_mean[,1],xlab='True',ylab='Learned',cex=1,cex.lab=2,cex.axis=2,pch=16)
# lines(1:1000,1:1000,col='red',lwd=2)
plot(beta_true_angle[,2],beta_mean[,2],xlab='True',ylab='Learned',cex=1,cex.lab=2,cex.axis=2,pch=16)
# beta_mean[,1] = pi - beta_mean[,1]
beta_mean[,2] = pi/2 - beta_mean[,2]
par(mfrow=c(2,1))
par(mar=c(10,10,4,4),mgp=c(6,2,0))
plot(beta_true_angle[,1],beta_mean[,1],xlab='True',ylab='Learned',cex=1,cex.lab=2,cex.axis=2,pch=16)
# lines(1:1000,1:1000,col='red',lwd=2)
plot(beta_true_angle[,2],beta_mean[,2],xlab='True',ylab='Learned',cex=1,cex.lab=2,cex.axis=2,pch=16)
diff = abs(rank(beta_true_angle[,1])-rank(beta_mean[,1]))
l_20 = which(diff%in% tail(diff[order(diff)],30))
l_20
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
Sys.getenv("BINPREF").
Sys.getenv("BINPREF")
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
Sys.setenv(MAKEFLAGS = "-j10") #
install.packages("rstan", type = "source")
remove.packages("rstan")
Sys.getenv("BINPREF")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
library(rstan)
example(stan_model,run.dontrun = TRUE)
library(rstan)
example(stan_model,run.dontrun = TRUE)
getcord_auto<-function(test,d){
sup = 1
for(i in 1:d){
nam <- paste("a", i, sep = "")
assign(nam, test[,i] )
sup =cbind(sup * sin(get(nam)),cos(get(nam)))
}
return(sup)
}
test = cbind(runif(100,0,2*pi),runif(100,0,pi))
getcord_auto(test,3)
getcord_auto(test,2)
### mapping from angles to embedded euclidean space
getcord_auto<-function(test,K){
sup = 1
for(i in 1:K){
nam <- paste("a", i, sep = "")
assign(nam, test[,i] )
sup =cbind(sup * sin(get(nam)),cos(get(nam)))
}
return(sup)
}
getcord_auto(test,2)
library(roxygen2) # In-Line Documentation for R
library(devtools) # Tools to Make Developing R Packages Easier
library(testthat) # Unit Testing for R
library(usethis)  # Automate Package and Project Setup
library(available) # Check if the Title of a Package is Available,
install.packages("available")
library(available) # Check if the Title of a Package is Available,
library(available) # Check if the Title of a Package is Available,
# Appropriate and Interesting
# Check for potential names
available::suggest("Spherical Latent Factor Model")
available::available("SphGod", browse = FALSE)
available::available("SphGod", browse = FALSE)
# Appropriate and Interesting
# Check for potential names
available::suggest("Spherical Latent Factor Model")
getwd()
qnorm(0.975)
dnorm(0)
dnorm(0,1,5)
dnorm(0,log=T)
qnorm(0.975,lower.tail=F)
?rgamma
hist(rgamma(10000,1,10))
hist(rgamma(10000,10,1))
hist(rgamma(10000,10,2))
x1 = rexp(1000,rate=1/42)
sum(dexp(x1,1/2,log=T))
sum(dexp(x1,1/42,log=T))
sum(dexp(x1,1/21,log=T))
exp(sum(dexp(x1,1/42,log=T)))
x1 = rexp(10,rate=1/42)
sum(dexp(x1,1/42,log=T))
sum(dexp(x1,1/42,log=T)) - sum(dexp(x1,1/21,log=T))
sum(dexp(x1,1/42,log=T))
sum(dexp(x1,1/21,log=T))
x1 = rexp(1000,rate=1/42)
sum(dexp(x1,1/42,log=T)) - sum(dexp(x1,1/21,log=T)) >
sum(dexp(x1,1/42,log=T)) - sum(dexp(x1,1/21,log=T))
sum(dexp(x1,1/42,log=T)) - sum(dexp(x1,1/21,log=T))
sum(dexp(x1,1/42,log=T)) - sum(dexp(x1,1/21,log=T)) > 0
chain = rep(0,1000)
for(i in 1:1000){
x1 = rexp(1000,rate=1/42)
chain[i] = (sum(dexp(x1,1/42,log=T)) - sum(dexp(x1,1/21,log=T))) > 0
}
sum(chain)
chain = rep(0,n)
n = 1000
for(i in 1:n){
x1 = rexp(100,rate=1/42)
chain[i] = (sum(dexp(x1,1/42,log=T)) - sum(dexp(x1,1/21,log=T))) > 0
}
sum(chain)
chain = rep(0,n)
n = 1000
for(i in 1:n){
x1 = rexp(100,rate=1/31)
chain[i] = (sum(dexp(x1,1/31,log=T)) - sum(dexp(x1,1/21,log=T))) > 0
}
sum(chain)
beta = rep(0,10)
beta = rep(0,3)
beta[c(1:2)] = 0
beta[c(1:2)] = 1
beta[numeric(0)] = 1
beta
beta[numeric(0)]
beta[numeric(0)] = 1
beta[numeric(0)]
out = matrix(sample(c(0,1),1000, T, probs=c(0.7,0.3)),100,10)
sample
out = matrix(sample(c(0,1),1000, T, prob=c(0.7,0.3)),100,10)
str(out)
master = SLFM(out, n_pos=100,burnin=100,thin = 1,congress = F, hyperparams=list(a = 1, b = 1/10,mu =0, ccc_a = 1, ccc_b=25, kappa_a = 1, omega_sd=0.1, kappa_sd=0.5,
i_epi_lower = 0.01, i_epi_upper = 0.08, j_epi_lower = 0.01 ,j_epi_upper = 0.105,
i_leap = 10, j_leap = 10,skip = 50, jitter = T, WAIC_group = T),
initial_values=NULL,core=10,cluster_seed=8888)
#### checking and installing required packages###
######################
required_package = c('Rcpp','snowfall','tidyverse','rlecuyer','RcppArmadillo','matrixStats')
check_package = sum(unlist(lapply(required_package, require, character.only = TRUE)))== length(required_package)
if(check_package ==F){
install.packages(required_package,repos = "http://cran.us.r-project.org")
lapply(required_package, require, character.only = TRUE)
}
source(file="./source/tidyverse_load_data.R")
source(file='./main_script/Circular_Factor_Model_tidyverse.R')
################################################################
hn = 117
house = T
h_s = ifelse(house==T,'H','S')
out = get_rollcall_data(house,h_s,hn,threshold = 0.4)
################################################################
# ymat = as.matrix(out[[1]] %>% select(-bioname,-name_district,-icpsr))
# pol_info = out[[1]] %>% select(bioname,name_district,icpsr)
# dup_name = out[[2]]
# filtered_legislator = out[[3]]
set.seed(2021)
out = matrix(sample(c(0,1),1000, T, prob=c(0.7,0.3)),100,10)
master = SLFM(out, n_pos=100,burnin=100,thin = 1,congress = F, hyperparams=list(a = 1, b = 1/10,mu =0, ccc_a = 1, ccc_b=25, kappa_a = 1, omega_sd=0.1, kappa_sd=0.5,
i_epi_lower = 0.01, i_epi_upper = 0.08, j_epi_lower = 0.01 ,j_epi_upper = 0.105,
i_leap = 10, j_leap = 10,skip = 50, jitter = T, WAIC_group = T),
master = SLFM(out, n_pos=100,burnin=100,thin = 1,congress = F, hyperparams=list(a = 1, b = 1/10,mu =0, ccc_a = 1, ccc_b=25, kappa_a = 1, omega_sd=0.1, kappa_sd=0.5,
i_epi_lower = 0.01, i_epi_upper = 0.08, j_epi_lower = 0.01 ,j_epi_upper = 0.105,
i_leap = 10, j_leap = 10,skip = 50, jitter = T, WAIC_group = T),
initial_values=NULL,core=10,cluster_seed=8888)
asdf
#### checking and installing required packages###
######################
required_package = c('Rcpp','snowfall','tidyverse','rlecuyer','RcppArmadillo','matrixStats')
check_package = sum(unlist(lapply(required_package, require, character.only = TRUE)))== length(required_package)
if(check_package ==F){
install.packages(required_package,repos = "http://cran.us.r-project.org")
lapply(required_package, require, character.only = TRUE)
}
source(file="./source/tidyverse_load_data.R")
source(file='./main_script/Circular_Factor_Model_tidyverse.R')
################################################################
hn = 117
house = T
h_s = ifelse(house==T,'H','S')
out = get_rollcall_data(house,h_s,hn,threshold = 0.4)
################################################################
# ymat = as.matrix(out[[1]] %>% select(-bioname,-name_district,-icpsr))
# pol_info = out[[1]] %>% select(bioname,name_district,icpsr)
# dup_name = out[[2]]
# filtered_legislator = out[[3]]
set.seed(2021)
out = matrix(sample(c(0,1),1000, T, prob=c(0.7,0.3)),100,10)
master = SLFM(out, n_pos=100,burnin=100,thin = 1,congress = F, hyperparams=list(a = 1, b = 1/10,mu =0, ccc_a = 1, ccc_b=25, kappa_a = 1, omega_sd=0.1, kappa_sd=0.5,
i_epi_lower = 0.01, i_epi_upper = 0.08, j_epi_lower = 0.01 ,j_epi_upper = 0.105,
i_leap = 10, j_leap = 10,skip = 50, jitter = T, WAIC_group = T),
initial_values=NULL,core=10,cluster_seed=8888)
setwd("F:/Study_Backedup/UCSC/depository/Circular_Factor_Model")
#### checking and installing required packages###
######################
required_package = c('Rcpp','snowfall','tidyverse','rlecuyer','RcppArmadillo','matrixStats')
check_package = sum(unlist(lapply(required_package, require, character.only = TRUE)))== length(required_package)
if(check_package ==F){
install.packages(required_package,repos = "http://cran.us.r-project.org")
lapply(required_package, require, character.only = TRUE)
}
source(file="./source/tidyverse_load_data.R")
source(file='./main_script/Circular_Factor_Model_tidyverse.R')
################################################################
# ymat = as.matrix(out[[1]] %>% select(-bioname,-name_district,-icpsr))
# pol_info = out[[1]] %>% select(bioname,name_district,icpsr)
# dup_name = out[[2]]
# filtered_legislator = out[[3]]
set.seed(2021)
out = matrix(sample(c(0,1),1000, T, prob=c(0.7,0.3)),100,10)
master = SLFM(out, n_pos=100,burnin=100,thin = 1,congress = F, hyperparams=list(a = 1, b = 1/10,mu =0, ccc_a = 1, ccc_b=25, kappa_a = 1, omega_sd=0.1, kappa_sd=0.5,
i_epi_lower = 0.01, i_epi_upper = 0.08, j_epi_lower = 0.01 ,j_epi_upper = 0.105,
i_leap = 10, j_leap = 10,skip = 50, jitter = T, WAIC_group = T),
initial_values=NULL,core=10,cluster_seed=8888)
