####################################################################################################
library(circular)
par(mar=c(7,7,2,2))
bryant = as.circular(beta_angle,units="radians",modulo="2pi",rotation="clock")
plot.circular(bryant,shrink=0.9,axes=F,units="radians",zero=pi/2,col='blue',cex=1.5)
unit = as.circular(c(-pi/2,0,pi/2),rotation='clock',zero=pi/2,cex.lab=2,cex.axis=2)
axis.circular(at=unit,labels=c(expression(-frac(pi,2)),"0",expression(frac(pi,2))),cex=3)
####################################################################################################
library(circular)
source('F:/Study_Backedup/UCSC/depository/Spherical_factor_model_cateogorical/source/Geodesic_paper3_nd_helper.R')
atan2_new = function(xmat){
atan2(xmat[,1],xmat[,2])
}
# pdf(file = paste0("F:/Study_Backedup/UCSC/LatentFactorModel/paper3_sim/learned_angle_simu_",sim_number,"_first_dim.pdf"),width=10, height=10)
# load("F:/Study_Backedup/UCSC/LatentFactorModel/beps2_fulldata/nd/1_10_tied_sym/Data_3_Tied_TRUE_Scale_FALSE_2_nd.Rdata")
load("F:/Study_Backedup/UCSC/LatentFactorModel/beps2_fulldata/nd/1_10_tied_sym/Data_3_Tied_TRUE_Scale_FALSE_2_nd.Rdata")
####################################################################################################
library(circular)
source('F:/Study_Backedup/UCSC/depository/Spherical_factor_model_cateogorical/source/Geodesic_paper3_nd_helper.R')
atan2_new = function(xmat){
atan2(xmat[,1],xmat[,2])
}
load("F:/Study_Backedup/UCSC/LatentFactorModel/beps2_fulldata/nd/1_10_untied_asym/Data_3_Tied_FALSE_Scale_TRUE_2_nd.Rdata")
beta_angle =  atan2_new(beta_rs/n_pos)
x11(width = 10,height=10)
par(mar=c(7,7,2,2))
bryant = as.circular(beta_angle,units="radians",modulo="2pi",rotation="clock")
plot.circular(bryant,shrink=0.9,axes=F,units="radians",zero=pi/2,col='blue',cex=1.5)
unit = as.circular(c(-pi/2,0,pi/2),rotation='clock',zero=pi/2,cex.lab=2,cex.axis=2)
axis.circular(at=unit,labels=c(expression(-frac(pi,2)),"0",expression(frac(pi,2))),cex=3)
# load("F:/Study_Backedup/UCSC/LatentFactorModel/paper3_sim/data_1_new_2/nd/1_10_tied_sym/Data_1_Tied_TRUE_Scale_FALSE_4_nd.Rdata")
load("F:/Study_Backedup/UCSC/LatentFactorModel/paper3_sim/data_1_2/nd/1_10_untied_asym/Data_1_Tied_FALSE_Scale_TRUE_3_nd.Rdata")
beta_mean = x_to_theta(ncol(beta_true)-1,1000,beta_rs/n_pos)
yes_mean = yes_rs/n_pos
yes_angle = x_to_theta(ncol(yes_mean)-1,nrow(yes_mean),yes_mean)
no_mean = no_rs/n_pos
no_angle = x_to_theta(ncol(no_mean)-1,nrow(no_mean),no_mean)
# beta_mean[,1] = pi - beta_mean[,1]
beta_mean[,2] = pi/2 - beta_mean[,2]
x11(width=10,height=20)
par(mfrow=c(2,1))
par(mar=c(10,10,4,4),mgp=c(6,2,0))
plot(beta_true_angle[,1],beta_mean[,1],xlab='True',ylab='Learned',cex=1,cex.lab=2,cex.axis=2,pch=16)
# lines(1:1000,1:1000,col='red',lwd=2)
plot(beta_true_angle[,2],beta_mean[,2],xlab='True',ylab='Learned',cex=1,cex.lab=2,cex.axis=2,pch=16)
##########################
# load("F:/Study_Backedup/UCSC/depository/Spherical_factor_model_cateogorical/data/simu_1_new_2.Rdata")
load("F:/Study_Backedup/UCSC/depository/Spherical_factor_model_cateogorical/data/simu_2.Rdata")
beta_true = ymat_out[[2]]
source("F:/Study_Backedup/UCSC/depository/Spherical_factor_model_cateogorical/source/Geodesic_paper3_nd_helper.R")
beta_true_angle = x_to_theta(ncol(beta_true)-1,1000,beta_true)
par(mfrow=c(2,1))
par(mar=c(10,10,4,4),mgp=c(6,2,0))
plot(beta_true_angle[,1],beta_mean[,1],xlab='True',ylab='Learned',cex=1,cex.lab=2,cex.axis=2,pch=16)
# lines(1:1000,1:1000,col='red',lwd=2)
plot(beta_true_angle[,2],beta_mean[,2],xlab='True',ylab='Learned',cex=1,cex.lab=2,cex.axis=2,pch=16)
l_20 = which(diff%in% tail(diff[order(diff)],30))
diff = abs(rank(beta_true_angle[,1])-rank(beta_mean[,1]))
l_20 = which(diff%in% tail(diff[order(diff)],30))
l_20
##########################
# load("F:/Study_Backedup/UCSC/depository/Spherical_factor_model_cateogorical/data/simu_1_new_2.Rdata")
load("F:/Study_Backedup/UCSC/depository/Spherical_factor_model_cateogorical/data/simu_2.Rdata")
beta_true = ymat_out[[2]]
source("F:/Study_Backedup/UCSC/depository/Spherical_factor_model_cateogorical/source/Geodesic_paper3_nd_helper.R")
beta_true_angle = x_to_theta(ncol(beta_true)-1,1000,beta_true)
load("F:/Study_Backedup/UCSC/depository/Spherical_factor_model_cateogorical/Data_1_Tied_FALSE_Scale_TRUE_3_nd.Rdata")
beta_mean = x_to_theta(ncol(beta_true)-1,1000,beta_rs/n_pos)
yes_mean = yes_rs/n_pos
yes_angle = x_to_theta(ncol(yes_mean)-1,nrow(yes_mean),yes_mean)
no_mean = no_rs/n_pos
no_angle = x_to_theta(ncol(no_mean)-1,nrow(no_mean),no_mean)
beta_mean[,1] = pi - beta_mean[,1]
# beta_mean[,1] = pi - beta_mean[,1]
beta_mean[,2] = pi/2 - beta_mean[,2]
x11(width=10,height=20)
par(mfrow=c(2,1))
par(mar=c(10,10,4,4),mgp=c(6,2,0))
plot(beta_true_angle[,1],beta_mean[,1],xlab='True',ylab='Learned',cex=1,cex.lab=2,cex.axis=2,pch=16)
# lines(1:1000,1:1000,col='red',lwd=2)
plot(beta_true_angle[,2],beta_mean[,2],xlab='True',ylab='Learned',cex=1,cex.lab=2,cex.axis=2,pch=16)
# beta_mean[,1] = pi - beta_mean[,1]
beta_mean[,2] = pi/2 - beta_mean[,2]
par(mfrow=c(2,1))
par(mar=c(10,10,4,4),mgp=c(6,2,0))
plot(beta_true_angle[,1],beta_mean[,1],xlab='True',ylab='Learned',cex=1,cex.lab=2,cex.axis=2,pch=16)
# lines(1:1000,1:1000,col='red',lwd=2)
plot(beta_true_angle[,2],beta_mean[,2],xlab='True',ylab='Learned',cex=1,cex.lab=2,cex.axis=2,pch=16)
diff = abs(rank(beta_true_angle[,1])-rank(beta_mean[,1]))
l_20 = which(diff%in% tail(diff[order(diff)],30))
l_20
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
Sys.getenv("BINPREF").
Sys.getenv("BINPREF")
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
Sys.setenv(MAKEFLAGS = "-j10") #
install.packages("rstan", type = "source")
remove.packages("rstan")
Sys.getenv("BINPREF")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
library(rstan)
example(stan_model,run.dontrun = TRUE)
library(rstan)
example(stan_model,run.dontrun = TRUE)
getcord_auto<-function(test,d){
sup = 1
for(i in 1:d){
nam <- paste("a", i, sep = "")
assign(nam, test[,i] )
sup =cbind(sup * sin(get(nam)),cos(get(nam)))
}
return(sup)
}
test = cbind(runif(100,0,2*pi),runif(100,0,pi))
getcord_auto(test,3)
getcord_auto(test,2)
### mapping from angles to embedded euclidean space
getcord_auto<-function(test,K){
sup = 1
for(i in 1:K){
nam <- paste("a", i, sep = "")
assign(nam, test[,i] )
sup =cbind(sup * sin(get(nam)),cos(get(nam)))
}
return(sup)
}
getcord_auto(test,2)
library(roxygen2) # In-Line Documentation for R
library(devtools) # Tools to Make Developing R Packages Easier
library(testthat) # Unit Testing for R
library(usethis)  # Automate Package and Project Setup
library(available) # Check if the Title of a Package is Available,
install.packages("available")
library(available) # Check if the Title of a Package is Available,
library(available) # Check if the Title of a Package is Available,
# Appropriate and Interesting
# Check for potential names
available::suggest("Spherical Latent Factor Model")
available::available("SphGod", browse = FALSE)
available::available("SphGod", browse = FALSE)
# Appropriate and Interesting
# Check for potential names
available::suggest("Spherical Latent Factor Model")
getwd()
qnorm(0.975)
dnorm(0)
dnorm(0,1,5)
dnorm(0,log=T)
qnorm(0.975,lower.tail=F)
?rgamma
hist(rgamma(10000,1,10))
hist(rgamma(10000,10,1))
hist(rgamma(10000,10,2))
x1 = rexp(1000,rate=1/42)
sum(dexp(x1,1/2,log=T))
sum(dexp(x1,1/42,log=T))
sum(dexp(x1,1/21,log=T))
exp(sum(dexp(x1,1/42,log=T)))
x1 = rexp(10,rate=1/42)
sum(dexp(x1,1/42,log=T))
sum(dexp(x1,1/42,log=T)) - sum(dexp(x1,1/21,log=T))
sum(dexp(x1,1/42,log=T))
sum(dexp(x1,1/21,log=T))
x1 = rexp(1000,rate=1/42)
sum(dexp(x1,1/42,log=T)) - sum(dexp(x1,1/21,log=T)) >
sum(dexp(x1,1/42,log=T)) - sum(dexp(x1,1/21,log=T))
sum(dexp(x1,1/42,log=T)) - sum(dexp(x1,1/21,log=T))
sum(dexp(x1,1/42,log=T)) - sum(dexp(x1,1/21,log=T)) > 0
chain = rep(0,1000)
for(i in 1:1000){
x1 = rexp(1000,rate=1/42)
chain[i] = (sum(dexp(x1,1/42,log=T)) - sum(dexp(x1,1/21,log=T))) > 0
}
sum(chain)
chain = rep(0,n)
n = 1000
for(i in 1:n){
x1 = rexp(100,rate=1/42)
chain[i] = (sum(dexp(x1,1/42,log=T)) - sum(dexp(x1,1/21,log=T))) > 0
}
sum(chain)
chain = rep(0,n)
n = 1000
for(i in 1:n){
x1 = rexp(100,rate=1/31)
chain[i] = (sum(dexp(x1,1/31,log=T)) - sum(dexp(x1,1/21,log=T))) > 0
}
sum(chain)
setwd("F:/Study_Backedup/UCSC/depository/Circular_Factor_Model")
#### checking and installing required packages###
######################
required_package = c('Rcpp','snowfall','tidyverse','rlecuyer','RcppArmadillo','matrixStats')
check_package = sum(unlist(lapply(required_package, require, character.only = TRUE)))== length(required_package)
if(check_package ==F){
install.packages(required_package,repos = "http://cran.us.r-project.org")
lapply(required_package, require, character.only = TRUE)
}
source(file="./source/tidyverse_load_data.R")
source(file='./main_script/Circular_Factor_Model_tidyverse.R')
################################################################
hn = 117
house = T
h_s = ifelse(house==T,'H','S')
out = get_rollcall_data(house,h_s,hn,threshold = 0.4)
str(out)
#### checking and installing required packages###
######################
required_package = c('Rcpp','snowfall','tidyverse','rlecuyer','RcppArmadillo','matrixStats')
check_package = sum(unlist(lapply(required_package, require, character.only = TRUE)))== length(required_package)
if(check_package ==F){
install.packages(required_package,repos = "http://cran.us.r-project.org")
lapply(required_package, require, character.only = TRUE)
}
source(file="./source/tidyverse_load_data.R")
source(file='./main_script/Circular_Factor_Model_tidyverse.R')
################################################################
hn = 117
house = T
h_s = ifelse(house==T,'H','S')
out = get_rollcall_data(house,h_s,hn,threshold = 0.4)
out$delinquents
out$flip_floppers
################################################################
# ymat = as.matrix(out[[1]] %>% select(-bioname,-name_district,-icpsr))
# pol_info = out[[1]] %>% select(bioname,name_district,icpsr)
# dup_name = out[[2]]
# filtered_legislator = out[[3]]
set.seed(2021)
master = SLFM(out, n_pos=100,burnin=100,thin = 1, hyperparams=list(a = 1, b = 1/10, ccc_a = 1, ccc_b=25, kappa_a = 1, omega_sd=0.1, kappa_sd=0.5,
i_epi_lower = 0.01, i_epi_upper = 0.08, j_epi_lower = 0.01 ,j_epi_upper = 0.105,
i_leap = 10, j_leap = 10,skip = 50, jitter = T, WAIC_group = T),
initial_values=NULL,core=10,cluster_seed=8888)
#### checking and installing required packages###
######################
required_package = c('Rcpp','snowfall','tidyverse','rlecuyer','RcppArmadillo','matrixStats')
check_package = sum(unlist(lapply(required_package, require, character.only = TRUE)))== length(required_package)
if(check_package ==F){
install.packages(required_package,repos = "http://cran.us.r-project.org")
lapply(required_package, require, character.only = TRUE)
}
source(file="./source/tidyverse_load_data.R")
source(file='./main_script/Circular_Factor_Model_tidyverse.R')
################################################################
hn = 117
house = T
h_s = ifelse(house==T,'H','S')
out = get_rollcall_data(house,h_s,hn,threshold = 0.4)
################################################################
# ymat = as.matrix(out[[1]] %>% select(-bioname,-name_district,-icpsr))
# pol_info = out[[1]] %>% select(bioname,name_district,icpsr)
# dup_name = out[[2]]
# filtered_legislator = out[[3]]
set.seed(2021)
master = SLFM(out, n_pos=100,burnin=100,thin = 1, hyperparams=list(a = 1, b = 1/10, ccc_a = 1, ccc_b=25, kappa_a = 1, omega_sd=0.1, kappa_sd=0.5,
i_epi_lower = 0.01, i_epi_upper = 0.08, j_epi_lower = 0.01 ,j_epi_upper = 0.105,
i_leap = 10, j_leap = 10,skip = 50, jitter = T, WAIC_group = T),
initial_values=NULL,core=10,cluster_seed=8888)
# hyperparams=list(a = 1, b = 1/10, ccc_a = 1, ccc_b=25, kappa_a = 1, omega_sd=0.1, kappa_sd=0.5,
#                  i_epi_lower = 0.005, i_epi_upper = 0.04, j_epi_lower = 0.01 ,j_epi_upper = 0.105,
#                  i_leap = 10, j_leap = 10,skip = 50, jitter = T, WAIC_group = T),
# initial_values=NULL,core=10,cluster_seed=8888)
############
master$thin
RcppCode
library(Rcpp)
sourceCpp('./source/test_bessel.cpp')
library(Rcpp)
sourceCpp('./source/test_bessel.cpp')
library(Rcpp)
sourceCpp('./source/test_bessel.cpp')
library(Rcpp)
sourceCpp('./source/test_bessel.cpp')
library(Rcpp)
sourceCpp('./source/test_bessel.cpp')
library(Rcpp)
sourceCpp('./source/test_bessel.cpp')
omega = runif(1,0,20)
beta = runif(1000,-pi,pi)
likeli_omega
omega = runif(1,0,20)
nr = 1000
beta = runif(nr,-pi,pi)
likeli_omega(omega,beta,nr)
likeli_omega(omega,beta,nr,1,1/10)
likeli_omega_2
likeli_omega(omega,beta,nr,1,1/10) == likeli_omega_2(omega,beta,nr,1,1/10)
likeli_omega_2(omega,beta,nr,1,1/10)
likeli_omega(omega,beta,nr,1,1/10)
likeli_omega(omega,beta,nr,1,1/10) == likeli_omega_2(omega,beta,nr,1,1/10)
likeli_omega(omega,beta,nr,1,1/10) -likeli_omega_2(omega,beta,nr,1,1/10)
omega = runif(1,0,20)
nr = 1000
beta = runif(nr,-pi,pi)
likeli_omega(omega,beta,nr,1,1/10) - likeli_omega_2(omega,beta,nr,1,1/10)
omega = runif(1,0,20)
nr = 1000
beta = runif(nr,-pi,pi)
likeli_omega(omega,beta,nr,1,1/10) - likeli_omega_2(omega,beta,nr,1,1/10)
omega = runif(1,0,20)
nr = 1000
beta = runif(nr,-pi,pi)
likeli_omega(omega,beta,nr,1,1/10) - likeli_omega_2(omega,beta,nr,1,1/10)
omega = runif(1,0,20)
nr = 1000
beta = runif(nr,-pi,pi)
likeli_omega(omega,beta,nr,1,1/10) - likeli_omega_2(omega,beta,nr,1,1/10)
omega = runif(1,0,20)
nr = 1000
beta = runif(nr,-pi,pi)
likeli_omega(omega,beta,nr,1,1/10) - likeli_omega_2(omega,beta,nr,1,1/10)
omega = runif(1,0,20)
nr = 1000
beta = runif(nr,-pi,pi)
likeli_omega(omega,beta,nr,1,1/10) - likeli_omega_2(omega,beta,nr,1,1/10)
omega = runif(1,0,20)
nr = 1000
beta = runif(nr,-pi,pi)
likeli_omega(omega,beta,nr,1,1/10) - likeli_omega_2(omega,beta,nr,1,1/10)
omega = runif(1,0,20)
nr = 1000
beta = runif(nr,-pi,pi)
likeli_omega(omega,beta,nr,1,1/10) - likeli_omega_2(omega,beta,nr,1,1/10)
omega = runif(1,0,20)
nr = 1000
beta = runif(nr,-pi,pi)
likeli_omega(omega,beta,nr,1,1/10) - likeli_omega_2(omega,beta,nr,1,1/10)
omega = runif(1,0,20)
nr = 1000
beta = runif(nr,-pi,pi)
likeli_omega(omega,beta,nr,1,1/10) - likeli_omega_2(omega,beta,nr,1,1/10)
omega = runif(1,0,20)
nr = 1000
beta = runif(nr,-pi,pi)
likeli_omega(omega,beta,nr,1,1/10) - likeli_omega_2(omega,beta,nr,1,1/10)
omega = runif(1,0,20)
nr = 1000
beta = runif(nr,-pi,pi)
likeli_omega(omega,beta,nr,1,1/10) - likeli_omega_2(omega,beta,nr,1,1/10)
omega = runif(1,0,20)
nr = 1000
beta = runif(nr,-pi,pi)
likeli_omega(omega,beta,nr,1,1/10) - likeli_omega_2(omega,beta,nr,1,1/10)
omega = runif(1,0,20)
nr = 1000
beta = runif(nr,-pi,pi)
likeli_omega(omega,beta,nr,1,1/10) - likeli_omega_2(omega,beta,nr,1,1/10)
omega = runif(1,0,20)
nr = 1000
beta = runif(nr,-pi,pi)
likeli_omega(omega,beta,nr,1,1/10) - likeli_omega_2(omega,beta,nr,1,1/10)
omega = runif(1,0,20)
nr = 1000
beta = runif(nr,-pi,pi)
likeli_omega(omega,beta,nr,1,1/10) - likeli_omega_2(omega,beta,nr,1,1/10)
omega = runif(1,0,20)
nr = 1000
beta = runif(nr,-pi,pi)
likeli_omega(omega,beta,nr,1,1/10) - likeli_omega_2(omega,beta,nr,1,1/10)
omega = runif(1,0,20)
nr = 1000
beta = runif(nr,-pi,pi)
likeli_omega(omega,beta,nr,1,1/10) - likeli_omega_2(omega,beta,nr,1,1/10)
omega = runif(1,0,20)
nr = 1000
beta = runif(nr,-pi,pi)
likeli_omega(omega,beta,nr,1,1/10) - likeli_omega_2(omega,beta,nr,1,1/10)
omega = runif(1,0,20)
nr = 1000
beta = runif(nr,-pi,pi)
likeli_omega(omega,beta,nr,1,1/10) - likeli_omega_2(omega,beta,nr,1,1/10)
omega = runif(1,0,20)
nr = 1000
beta = runif(nr,-pi,pi)
likeli_omega(omega,beta,nr,1,1/10) - likeli_omega_2(omega,beta,nr,1,1/10)
omega = runif(1,0,20)
nr = 1000
beta = runif(nr,-pi,pi)
likeli_omega(omega,beta,nr,1,1/10) - likeli_omega_2(omega,beta,nr,1,1/10)
omega = runif(1,0,20)
nr = 1000
beta = runif(nr,-pi,pi)
likeli_omega(omega,beta,nr,1,1/10) - likeli_omega_2(omega,beta,nr,1,1/10)
CircStats::dvm
library(Rcpp)
sourceCpp('./source/test_bessel.cpp')
omega = runif(1,0,20)
nr = 1000
beta = runif(nr,-pi,pi)
CircStats::dvm(beta,0,omega)
sum(log(CircStats::dvm(beta,0,omega)))
likeli_omega_2(omega,beta,nr)
sum(log(CircStats::dvm(beta,0,omega))) == likeli_omega_2(omega,beta,nr)
sum(log(CircStats::dvm(beta,0,omega))) - likeli_omega_2(omega,beta,nr)
likeli_omega(omega,beta,nr) - sum(log(CircStats::dvm(beta,0,omega)))
omega = runif(1,0,20)
nr = 1000
beta = runif(nr,-pi,pi)
#likeli_omega(omega,beta,nr) - likeli_omega_2(omega,beta,nr)
sum(log(CircStats::dvm(beta,0,omega))) - likeli_omega_2(omega,beta,nr)
omega = runif(1,0,20)
nr = 1000
beta = runif(nr,-pi,pi)
#likeli_omega(omega,beta,nr) - likeli_omega_2(omega,beta,nr)
sum(log(CircStats::dvm(beta,0,omega))) - likeli_omega_2(omega,beta,nr)
omega = runif(1,0,20)
nr = 1000
beta = runif(nr,-pi,pi)
#likeli_omega(omega,beta,nr) - likeli_omega_2(omega,beta,nr)
sum(log(CircStats::dvm(beta,0,omega))) - likeli_omega_2(omega,beta,nr)
omega = runif(1,0,20)
nr = 1000
beta = runif(nr,-pi,pi)
#likeli_omega(omega,beta,nr) - likeli_omega_2(omega,beta,nr)
sum(log(CircStats::dvm(beta,0,omega))) - likeli_omega_2(omega,beta,nr)
omega = runif(1,0,20)
nr = 1000
beta = runif(nr,-pi,pi)
#likeli_omega(omega,beta,nr) - likeli_omega_2(omega,beta,nr)
sum(log(CircStats::dvm(beta,0,omega))) - likeli_omega_2(omega,beta,nr)
omega = runif(1,0,20)
nr = 1000
beta = runif(nr,-pi,pi)
#likeli_omega(omega,beta,nr) - likeli_omega_2(omega,beta,nr)
sum(log(CircStats::dvm(beta,0,omega))) - likeli_omega_2(omega,beta,nr)
omega = runif(1,0,20)
nr = 1000
beta = runif(nr,-pi,pi)
#likeli_omega(omega,beta,nr) - likeli_omega_2(omega,beta,nr)
sum(log(CircStats::dvm(beta,0,omega))) - likeli_omega_2(omega,beta,nr)
omega = runif(1,0,20)
nr = 1000
beta = runif(nr,-pi,pi)
#likeli_omega(omega,beta,nr) - likeli_omega_2(omega,beta,nr)
sum(log(CircStats::dvm(beta,0,omega))) - likeli_omega_2(omega,beta,nr)
CircStats::dvm
#### checking and installing required packages###
######################
required_package = c('Rcpp','snowfall','tidyverse','rlecuyer','RcppArmadillo','matrixStats')
check_package = sum(unlist(lapply(required_package, require, character.only = TRUE)))== length(required_package)
if(check_package ==F){
install.packages(required_package,repos = "http://cran.us.r-project.org")
lapply(required_package, require, character.only = TRUE)
}
source(file="./source/tidyverse_load_data.R")
source(file='./main_script/Circular_Factor_Model_tidyverse.R')
################################################################
hn = 117
house = T
h_s = ifelse(house==T,'H','S')
out = get_rollcall_data(house,h_s,hn,threshold = 0.4)
################################################################
# ymat = as.matrix(out[[1]] %>% select(-bioname,-name_district,-icpsr))
# pol_info = out[[1]] %>% select(bioname,name_district,icpsr)
# dup_name = out[[2]]
# filtered_legislator = out[[3]]
set.seed(2021)
master = SLFM(out, n_pos=100,burnin=100,thin = 1, hyperparams=list(a = 1, b = 1/10,mu =0, ccc_a = 1, ccc_b=25, kappa_a = 1, omega_sd=0.1, kappa_sd=0.5,
i_epi_lower = 0.01, i_epi_upper = 0.08, j_epi_lower = 0.01 ,j_epi_upper = 0.105,
i_leap = 10, j_leap = 10,skip = 50, jitter = T, WAIC_group = T),
initial_values=NULL,core=10,cluster_seed=8888)
#### checking and installing required packages###
######################
required_package = c('Rcpp','snowfall','tidyverse','rlecuyer','RcppArmadillo','matrixStats')
check_package = sum(unlist(lapply(required_package, require, character.only = TRUE)))== length(required_package)
if(check_package ==F){
install.packages(required_package,repos = "http://cran.us.r-project.org")
lapply(required_package, require, character.only = TRUE)
}
source(file="./source/tidyverse_load_data.R")
source(file='./main_script/Circular_Factor_Model_tidyverse.R')
################################################################
hn = 117
house = T
h_s = ifelse(house==T,'H','S')
out = get_rollcall_data(house,h_s,hn,threshold = 0.4)
################################################################
# ymat = as.matrix(out[[1]] %>% select(-bioname,-name_district,-icpsr))
# pol_info = out[[1]] %>% select(bioname,name_district,icpsr)
# dup_name = out[[2]]
# filtered_legislator = out[[3]]
set.seed(2021)
master = SLFM(out, n_pos=100,burnin=100,thin = 1, hyperparams=list(a = 1, b = 1/10,mu =0, ccc_a = 1, ccc_b=25, kappa_a = 1, omega_sd=0.1, kappa_sd=0.5,
i_epi_lower = 0.01, i_epi_upper = 0.08, j_epi_lower = 0.01 ,j_epi_upper = 0.105,
i_leap = 10, j_leap = 10,skip = 50, jitter = T, WAIC_group = T),
initial_values=NULL,core=10,cluster_seed=8888)
#### checking and installing required packages###
######################
required_package = c('Rcpp','snowfall','tidyverse','rlecuyer','RcppArmadillo','matrixStats')
check_package = sum(unlist(lapply(required_package, require, character.only = TRUE)))== length(required_package)
if(check_package ==F){
install.packages(required_package,repos = "http://cran.us.r-project.org")
lapply(required_package, require, character.only = TRUE)
}
source(file="./source/tidyverse_load_data.R")
source(file='./main_script/Circular_Factor_Model_tidyverse.R')
################################################################
hn = 117
house = T
h_s = ifelse(house==T,'H','S')
out = get_rollcall_data(house,h_s,hn,threshold = 0.4)
################################################################
# ymat = as.matrix(out[[1]] %>% select(-bioname,-name_district,-icpsr))
# pol_info = out[[1]] %>% select(bioname,name_district,icpsr)
# dup_name = out[[2]]
# filtered_legislator = out[[3]]
set.seed(2021)
master = SLFM(out, n_pos=100,burnin=100,thin = 1, hyperparams=list(a = 1, b = 1/10,mu =0, ccc_a = 1, ccc_b=25, kappa_a = 1, omega_sd=0.1, kappa_sd=0.5,
i_epi_lower = 0.01, i_epi_upper = 0.08, j_epi_lower = 0.01 ,j_epi_upper = 0.105,
i_leap = 10, j_leap = 10,skip = 50, jitter = T, WAIC_group = T),
initial_values=NULL,core=10,cluster_seed=8888)
